//$Copyright (c) 2016-2017 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
//Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 

using com.apama.memorystore.Row;
using com.apama.memorystore.Storage;
using com.apama.memorystore.Store;
using com.apama.memorystore.Schema;
using com.apama.memorystore.Table;
using com.apama.memorystore.Finished;
using com.apama.memorystore.RowChanged;

event SampleSchema {
	string sensorId;
	string name;
	string value;
	float timestamp;
}

monitor PersistentMonitorTest {
	constant string storeName := "MyStore";
	constant string sensorTable := "SensorData";

	Store store;
	integer count;
	action onload {
		on all Finished(success=false) as f
		{
			log "Asynchronous MemoryStore operation failed: "+f.toString() at ERROR;
			die;
		}

		log "Preparing store." at INFO;
		on Finished(id = Storage.prepareOrCreate(storeName,"/apama_work/receiverMemStore.dat"), success=true) as f {
			store := Storage.open(storeName);
			testSensorTable();
		}
	}


	action testSensorTable() {
		log "Preparing table SensorData." at INFO;

		on Finished(id = store.prepare(sensorTable, Schema.schemaFromAny(new SampleSchema)), success=true) as f {
			log "Opening table SensorData and performing first write." at INFO;

			Table tbl := store.open(sensorTable);
			
			on all wait(10.0)
			{
				count := 0;
				integer temp := 37;
			
				while (count < 3)
				{
					string key := "sensor"+count.toString();
					Row row := tbl.get(key);
					if not row.inTable() {
						log "Row for "+ key + " is not present, adding a new row." at INFO;
					} else {
						log "Row for "+ key + " was already present, updating it. Current value [" + row.getString("sensorId") +"," + row.getString("name") + "," + row.getString("value") + "," + row.getFloat("timestamp").toString() + "]" at INFO;
					}

					row.setAll(SampleSchema(key, "temperature", temp.rand().toString(), currentTime));
					row.commit();

					row := tbl.get(key);
					if row.inTable() {
						log "Row for "+ key + " is updated in the table: [" + row.getString("sensorId") +"," + row.getString("name") + "," + row.getString("value") + "," + row.getFloat("timestamp").toString() + "]" at INFO;
					} else {
						log "Row for "+ key + " is still not present in the table." at ERROR;
					}
					count:= count+1;
					on Finished(id = tbl.persist()) {
						log "Table persisted";
					}
				}
			}
		}
	}
}
